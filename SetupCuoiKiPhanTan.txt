CÃ¡c dependence:
	<dependencies>
		<!-- https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core -->
		<dependency>
			<groupId>org.hibernate.orm</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>6.4.4.Final</version>
		</dependency>
		<!--
		https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc -->
		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
			<version>12.3.0.jre17-preview</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.24</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.3.1</version>
		</dependency>

		<!--
		https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
			<version>3.3.3</version>
		</dependency>


	</dependencies>
-----------------------------------------------------------------------------------------
Setup project JPA:

<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
	<persistence-unit
		name="onTapCuoiKi_JPAWithSocket_DeMau02_SQLServer">

		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
		<properties>
			<property name="jakarta.persistence.jdbc.url"
				value="jdbc:sqlserver://localhost:1433;databaseName=company;trustServerCertificate=true" />
			<property name="jakarta.persistence.jdbc.user" value="sa" />
			<property name="jakarta.persistence.jdbc.password"
				value="sapassword" />
			<property name="jakarta.persistence.jdbc.driver"
				value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
			<property name="jakarta.persistence.jdbc.dialect"
				value="org.hibernate.dialect.SQLServerDialect" />
			<property name="hibernate.format_sql" value="true" />
			<property name="hibernate.hbm2ddl.auto" value="update" />
		</properties>
	</persistence-unit>

	<persistence-unit
		name="onTapCuoiKi_JPAWithSocket_DeMau02_MariaDB">
		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
		<properties>
			<property name="jakarta.persistence.jdbc.url"
				value="jdbc:mariadb://localhost:3306/bike-store" />
			<property name="jakarta.persistence.jdbc.user" value="root" />
			<property name="jakarta.persistence.jdbc.password"
				value="12345678" />
			<property name="jakarta.persistence.jdbc.driver"
				value="org.mariadb.jdbc.Driver" />
			<property name="hibernate.dialect"
				value="org.hibernate.dialect.MariaDBDialect" />
			<property name="hibernate.show_sql" value="true" />
			<property name="hibernate.format_sql" value="true" />
			<property name="hibernate.hbm2ddl.auto" value="update" />
		</properties>
	</persistence-unit>
</persistence>
--------------------------------------------------------------------------------------------
Server:
public class Server {

  public static void main(String[] args) {
    try (ServerSocket server = new ServerSocket(2003);) {
      System.out.println("Server started on port 2003");

      while (true) {
        Socket client = server.accept();

        System.out.println("Client connected");
        System.out.println(
          "Client IP: " + client.getInetAddress().getHostName()
        );
        System.out.println("Client Port: " + client.getPort());

        Thread t = new Thread(new ClientHandler(client));
        t.start();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

class ClientHandler implements Runnable {

  private Socket socket;
  private CandidateDao candidateDao;

  public ClientHandler(Socket client) {
    super();
    this.socket = client;
    this.candidateDao = new CandidateDao();
  }

  @Override
  public void run() {
    try {
      DataInputStream in = new DataInputStream(socket.getInputStream());
      ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());

      int choice = 0;

      while (true) {
        choice = in.readInt();
        switch (choice) {
          case 1:
            String name = in.readUTF();
            double salaryFrom = in.readDouble();
            double salaryTo = in.readDouble();
            List<Position> positions = candidateDao.listPositions(
              name,
              salaryFrom,
              salaryTo
            );
            out.writeObject(positions);
            break;
          case 2:
            Map<Candidate, Long> map = candidateDao.listCadidatesByCompanies();
            out.writeObject(map);
          case 3:
            Map<Candidate, Position> map1 = candidateDao.listCandidatesWithLongestWorking();
            out.writeObject(map1);
            break;
          case 4:
            String id = in.readUTF();
            String fullName = in.readUTF();
            int dob = in.readInt();
            String gender = in.readUTF();
            String email = in.readUTF();
            String phone = in.readUTF();
            String description = in.readUTF();
            Candidate candidate = new Candidate(
              id,
              fullName,
              dob,
              gender,
              email,
              phone,
              description
            );
            boolean result = candidateDao.addCandidate(candidate);
            System.out.println("Add candidate result: " + result);
            out.writeBoolean(result);
            out.flush();
            break;
          case 5:
            String candidateID = in.readUTF();
            Map<Position, Integer> map2 = candidateDao.listYearsOfExperienceByPosition(
              candidateID
            );
            out.writeObject(map2);
            break;
          case 6:
            Map<Candidate, Set<Certificate>> map3 = candidateDao.listCadidatesAndCertificates();
            out.writeObject(map3);
            break;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Client:
public class Client {
	@SuppressWarnings("unchecked")
	public static void main(String[] args) {

		try (Socket socket = new Socket("IAMHOANGKHANG", 2003); Scanner sc = new Scanner(System.in);) {
			DataOutputStream out = new DataOutputStream(socket.getOutputStream());
			ObjectInputStream in = new ObjectInputStream(socket.getInputStream());

			int choice = 0;

			while (true) {
				System.out.println("1. Get list position by name and salary"
						+ "\n2. Get list candidate and number of companies they worked for"
						+ "\n3. Get list candidate and their working position with longest time"
						+ "\n4. Add new candidate" + "\n5. Get list candidate and their years of experience by position"
						+ "\n6. Exit");

				choice = sc.nextInt();
				out.writeInt(choice);
				switch (choice) {
				case 1:
					sc.nextLine();
					System.out.println("Enter the position name: ");
					String name = sc.nextLine();
					out.writeUTF(name);

					System.out.println("Enter the salary from: ");
					double salaryFrom = sc.nextDouble();
					out.writeDouble(salaryFrom);

					System.out.println("Enter the salary to: ");
					double salaryTo = sc.nextDouble();
					out.writeDouble(salaryTo);
					out.flush();

					List<Position> positions = (List<Position>) in.readObject();
					positions.forEach(System.out::println);
					break;

				case 2:
					Map<Candidate, Long> map = (Map<Candidate, Long>) in.readObject();
					map.forEach((k, v) -> System.out.println(k + " - " + v));
					break;
				case 3:
					Map<Candidate, Position> map1 = (Map<Candidate, Position>) in.readObject();
					map1.forEach((k, v) -> System.out.println(k + " - " + v));
					break;
				case 4:
					sc.nextLine();
					System.out.println("Enter the candidate ID: ");
					String id = sc.nextLine();
					out.writeUTF(id);

					System.out.println("Enter the full name: ");
					String fullName = sc.nextLine();
					out.writeUTF(fullName);

					System.out.println("Enter the year of birth: ");
					int yearOfBirth = sc.nextInt();
					out.writeInt(yearOfBirth);

					sc.nextLine();
					System.out.println("Enter gender: ");
					String gender = sc.nextLine();
					out.writeUTF(gender);
					
					System.out.println("Enter email: ");
					String email = sc.nextLine();
					out.writeUTF(email);
					
					System.out.println("Enter phone: ");
					String phone = sc.nextLine();
					out.writeUTF(phone);
					
					System.out.println("Enter description: ");
					String description = sc.nextLine();
					out.writeUTF(description);
								
					
					out.flush();

					try {
                        // existing code
                        if (in.readBoolean()) {
                            System.out.println("Add new candidate successfully!");
                        } else {
                            System.out.println("Add new candidate failed!");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
					break;

				case 5:
					sc.nextLine();
					System.out.println("Enter the candidate ID: ");
					String candidateID = sc.nextLine();
					out.writeUTF(candidateID);
					out.flush();

					Map<Position, Integer> map2 = (Map<Position, Integer>) in.readObject();
					map2.forEach((k, v) -> System.out.println(k + " - " + v));
					break;
				case 6:
					System.out.println("Exit");
					out.writeInt(6);
					out.flush();
					break;

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
}

